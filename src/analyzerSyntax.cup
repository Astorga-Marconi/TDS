/**
 * Copyright (C) 2014
 * All rights reserved.
 *
 * File Name: analizerSyntax.cup
 * To Create: cup analizerSyntax.cup
 * Project: Compilador
 * Authors: Astorga Dario - Marconi Pablo
 * Version: 0.1 
 */
import java_cup.runtime.*;
import ir.ast.*;
import ir.semcheck.*;
import java.util.*;
import error.Error;


action code {:
	SymbolTable table = new SymbolTable();
	Type currentType;
	TypeCheckVisitor typeVisitor = new TypeCheckVisitor();
	Integer currentInLoop = 0;	// Cada vez que abro un bloque de ciclo lo incremento y cuando el bloque
								// cierra lo decremento. Entonces Si currentInLoop es 0 no se encuentra
								// en un ciclo, sino lo contrario.
	private void endProgram() {
		for (Error e: typeVisitor.getErrors()) {	// Imprimo por pantalla los errores del checkeo de tipos.
				System.out.println(e.toString());
		}
		
		System.out.println("Test finalizado");
	}
:}

/* Terminals (tokens obtained by the lexical analyzer) */
terminal BREAK;
terminal CLASS;
terminal CONTINUE;
terminal FOR;
terminal WHILE;
terminal RETURN;
terminal LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, LPAREN, RPAREN, COMMA, EXTERNINVK;
terminal Type TVOID;			
terminal String ID;
terminal BinOpType PLUS, MINUS, MULT, DIV, MOD, LT, GT, LTEQ, GTEQ, EQEQ, NOTEQ, ANDAND, NOT, OROR;
terminal AssignOpType PLUSEQ, MINUSEQ, EQ;
terminal Type TINT, TFLOAT, TBOOLEAN;
terminal String INT_LITERAL, FLOAT_LITERAL, BOOL_LITERAL;
terminal String STRING_LITERAL;
terminal String IF,ELSE;

/* Non terminals */
non terminal	program,
				set_decl,
				field_decl,
				id_field_decl,
				method_decl,
				set_field_decl,	
				set_method_decl,
				list_id_field_decl;
			
non terminal    Type type;
non terminal    Literal literal;
non terminal    Block block, _block;
non terminal 	AssignOpType assign_op;
non terminal 	LinkedList set_statement, list_expr, list_externinvk_arg, list_type_id_method_decl, zero_or_one_list_type_id_method_decl;
non terminal 	Statement statement, method_call_stmt; // zero_or_one_else_block,
non terminal	Expression expr, zero_or_one_expr, method_call_expr, externinvk_arg;
non terminal 	VarLocation location;
non terminal 	VarDescriptor type_id_method_decl;
non terminal    IfStmt if_stmt;
non terminal    BinOpExpr bin_op;
non terminal    ArithExpr arith_op;
non terminal    RelExpr rel_op;
non terminal    EqExpr eq_op;
non terminal    CondExpr cond_op;

/* Precedences */
precedence left  EQ, ANDAND, NOT, NOTEQ;
precedence left  OROR;
precedence left  LT, GT, LTEQ, GTEQ, EQEQ;
precedence left  PLUS, MINUS;
precedence left  MULT, DIV, MOD;

/* The grammar rules */
start with program;

program ::= 
		CLASS ID LBRACE {: table.insertNewBlock(); :} set_decl RBRACE {: table.closeBlock(); endProgram(); :}
	|	CLASS ID LBRACE {: table.insertNewBlock(); :} RBRACE {: table.closeBlock(); endProgram();:}
	;

set_decl ::= 
		set_field_decl set_method_decl
	|	set_method_decl
	|	set_field_decl
	;

set_field_decl ::= 
		set_field_decl field_decl
	|	field_decl
	;

field_decl ::= type list_id_field_decl SEMICOLON;

id_field_decl ::= 
		ID:id1
		{:	table.insertNewVar(new VarDescriptor(currentType, id1));	:}
	|	ID:id1 LBRACK INT_LITERAL:s RBRACK
		{:	table.insertNewArrayVar(new ArrayVarDescriptor(currentType, id1, s));	:}
	;

list_id_field_decl ::= list_id_field_decl COMMA id_field_decl | id_field_decl;

method_decl ::= 
		type:t1 ID:id1 LPAREN zero_or_one_list_type_id_method_decl:params
		{:	table.insertNewMethod( new FunctionDescriptor(t1, id1, params)); :}
		RPAREN block:b
		{:	typeVisitor.visit(b);	:}
	|	TVOID:t1 ID:id1 LPAREN zero_or_one_list_type_id_method_decl:params
		{:	table.insertNewMethod( new FunctionDescriptor(t1, id1, params)); :}
		RPAREN block:b
		{:	typeVisitor.visit(b);	:}
	;

set_method_decl ::= method_decl set_method_decl | method_decl;

zero_or_one_list_type_id_method_decl ::=
		list_type_id_method_decl:l1
		{: RESULT =  l1; :}
	|	/* LAMBDA */
		{: RESULT = new LinkedList<VarDescriptor>(); :}
	;

list_type_id_method_decl ::= 
		type_id_method_decl:d1 COMMA list_type_id_method_decl:l1
		{:	LinkedList<VarDescriptor> dlist = new LinkedList<VarDescriptor>();
			dlist.add(d1);
			dlist.addAll(l1);
			RESULT = dlist; :}
	|	type_id_method_decl:d1
		{:	LinkedList<VarDescriptor> dlist = new LinkedList<VarDescriptor>();
			dlist.add(d1);
			RESULT = dlist; :} 
	;

type_id_method_decl ::= 
		type ID:id1
		{:	table.insertSymbol(currentType, id1);
			RESULT = new VarDescriptor(currentType, id1); :};

block ::= {:table.insertNewBlock();:} _block:b1 {:table.closeBlock(); RESULT = b1; :};

_block ::= 
		LBRACE  set_field_decl set_statement:ss RBRACE
		{:	/*for (Statement stt : ss) {
				System.out.println("_BLOCK: UN STATEMENT");
			}*/
			//System.out.println("BLOCK: " + ss.size() + " STATEMENT");
			RESULT = new Block(table.getCurrentLevel(), ss); :}		// Usamos set_field_declaration??
	|	LBRACE set_statement:ss RBRACE
		{: RESULT = new Block(table.getCurrentLevel(), ss); :} 
	|	LBRACE set_field_decl RBRACE
		{:	LinkedList<Statement> ss = new LinkedList<Statement>();
			RESULT = new Block(table.getCurrentLevel(), ss); :} 
	;

type ::=
		TBOOLEAN:t {:currentType = Type.TBOOLEAN;:}
	|	TFLOAT:t {:currentType = Type.TFLOAT;:}
	|	TINT:t {:currentType = Type.TINT;:}
	;

statement ::=
		location:l1 assign_op:ap1 expr:e1 SEMICOLON
		{:	if (l1 != null || ap1 != null || e1 != null) RESULT = new AssignStmt(l1, ap1, e1); :}
	|	method_call_stmt:mc SEMICOLON
		{: RESULT = mc; :}
	|	if_stmt:a 
		{: RESULT = a; :}	
	|	FOR ID:id1 EQ expr:e1 COMMA expr:e2 {:currentInLoop++;:} block:b1
		{:	currentInLoop--;
			RESULT = (table.checkVar(id1)) ? (new ForStmt(id1, e1, e2, b1)) : null;	:}
	|	WHILE expr:e {:currentInLoop++;:} block:b
		{:	currentInLoop--;
			RESULT = new WhileStmt(e, (Block)b); :}
	|	RETURN zero_or_one_expr:e1 SEMICOLON
		{: RESULT = new ReturnStmt(e1); :}
	|	BREAK SEMICOLON
		{:	if (currentInLoop == 0) System.out.println("Error: Break statement must be in a Loop.");
			else RESULT = new BreakStmt();	:}
	|	CONTINUE SEMICOLON
		{:	if (currentInLoop == 0) System.out.println("Error: Continue statement must be in a Loop.");
			else RESULT = new ContinueStmt(); :}
	|	SEMICOLON
		{: RESULT = new SemicolonStmt(); :}
	|	block:b1
		{: RESULT = b1; :}
	;

if_stmt ::=  
		IF:w LPAREN expr:e RPAREN block:b1 ELSE block:b2 
		{: RESULT = new IfStmt(e, (Block)b1, (Block)b2); :}
    |   IF:w LPAREN expr:e RPAREN block:b 
    	{: RESULT = new IfStmt(e, (Block)b); :} ;
	
set_statement ::= 
		statement:s set_statement:ss
		{:	LinkedList<Statement> set_st = new LinkedList<Statement>();
			if (s != null) set_st.add(s);
			set_st.addAll(ss);
			RESULT = set_st; :} 
	|	statement:s
		{:	LinkedList<Statement> set_st = new LinkedList<Statement>();
			if (s != null) set_st.add(s);
			RESULT = set_st; :}
	;

zero_or_one_expr ::= 
		expr:e1
		{: RESULT = e1; :}
	|	/* LAMBDA */
		{: RESULT = null; :}
	;

assign_op ::=
		EQ
		{: RESULT = AssignOpType.EQ; :}
	|	PLUSEQ
		{: RESULT = AssignOpType.PLUSEQ; :}
	|	MINUSEQ
		{: RESULT = AssignOpType.MINUSEQ; :}
	;

method_call_stmt ::= 
		ID:id1 LPAREN  RPAREN
		{:	RESULT = (table.checkMethodCall(id1, (new LinkedList<Expression>()) )) ? (new MethodCallStmt(id1)) : null;	:}
	|	ID:id1 LPAREN list_expr:le RPAREN
		{:	RESULT = (table.checkMethodCall(id1, le)) ? (new MethodCallStmt(id1)) : null;	:}
	|	EXTERNINVK LPAREN STRING_LITERAL:id1 COMMA type:t RPAREN
		{: RESULT = new ExternInvkStmt(id1, t); :}
	|	EXTERNINVK LPAREN STRING_LITERAL:id1 COMMA type:t COMMA list_externinvk_arg:l RPAREN
		{: RESULT = new ExternInvkStmt(id1, t, l); :}
	|	EXTERNINVK LPAREN STRING_LITERAL:id1 COMMA TVOID:t RPAREN
		{: RESULT = new ExternInvkStmt(id1, t); :}
	|	EXTERNINVK LPAREN STRING_LITERAL:id1 COMMA TVOID:t COMMA list_externinvk_arg:l RPAREN
		{: RESULT = new ExternInvkStmt(id1, t, l); :}
	;

method_call_expr ::= 
		ID LPAREN  RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	|	ID LPAREN list_expr RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	|	EXTERNINVK LPAREN STRING_LITERAL COMMA type RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	|	EXTERNINVK LPAREN STRING_LITERAL COMMA type COMMA list_externinvk_arg RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	|	EXTERNINVK LPAREN STRING_LITERAL COMMA TVOID RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	|	EXTERNINVK LPAREN STRING_LITERAL COMMA TVOID COMMA list_externinvk_arg RPAREN
		//{: RESULT = new MethodCallExpr(); :}
	;

location ::= 
		ID:id1
		{:	RESULT = (table.checkVar(id1)) ? (new VarLocation(id1, (table.search(id1).getType()))) : null;	:}
	|	ID:id1 LBRACK expr RBRACK
		{:	RESULT = (table.checkArrayVar(id1)) ? (new VarLocation(id1, (table.search(id1).getType()))) : null;	:}
	;

list_expr ::= 
		expr:e1 COMMA list_expr:lexpr
		{:	LinkedList<Expression> list_e = new LinkedList<Expression>();
			list_e.add(e1);
			list_e.addAll(lexpr);
			RESULT = list_e; :}
	|	expr:e1
		{:	LinkedList<Expression> list_e = new LinkedList<Expression>();
			list_e.add(e1);
			RESULT = list_e; :}
	;

expr ::=
		location:l1
		{: RESULT = l1; :}
	|	method_call_expr:m1
		{: RESULT = m1; :}
	|	literal:l1
		{: RESULT = l1; :}
	|	expr:e1 bin_op:b expr:e2 
		{: b.setLeftOperand(e1); b.setRightOperand(e2); RESULT = b; :}
	|	MINUS:m1 expr:e1
		{: RESULT = new NegativeExpr(m1, e1); :}
	|	NOT:n1 expr:e1
		{: RESULT = new NotExp(n1, e1); :}
	|	LPAREN:l expr:e RPAREN:r 
		{:RESULT = new ParentExpr(e, e.getType());:}
	;

externinvk_arg ::=
		expr:e1
		{: RESULT = new ExternInvkArgExpr(e1); :}
	|	STRING_LITERAL:s1
		{: RESULT = new ExternInvkArgStringLit(s1); :}
	;
	
list_externinvk_arg ::= 
		externinvk_arg:ei COMMA list_externinvk_arg:lei
		{:	LinkedList<Expression> list_ei = new LinkedList<Expression>();
			list_ei.add(ei);
			list_ei.addAll(lei);
			RESULT = list_ei; :}
	|	externinvk_arg:e1
		{:	LinkedList<Expression> list_ei = new LinkedList<Expression>();
			list_ei.add(e1);
			RESULT = list_ei; :}
	;

bin_op ::=
		arith_op:ao
		{: RESULT = ao; :}
	|	rel_op:ro
		{: RESULT = ro; :}
	|	eq_op:eo 
		{: RESULT = eo; :}
	|	cond_op:co
		{: RESULT = co; :}
	;

arith_op ::=
		PLUS
		{: ArithExpr plus = new ArithExpr(BinOpType.PLUS);RESULT=plus; :} 
	|	MINUS
		{: ArithExpr minus = new ArithExpr(BinOpType.MINUS);RESULT=minus; :} 
	|	MULT
		{: ArithExpr mult = new ArithExpr(BinOpType.MULT);RESULT=mult; :} 
	|	DIV
		{: ArithExpr div = new ArithExpr(BinOpType.DIV);RESULT=div; :} 
	|	MOD
		{: ArithExpr mod = new ArithExpr(BinOpType.MOD);RESULT=mod; :} 
	;

rel_op ::=
		LT
		{: RelExpr lt = new RelExpr(BinOpType.LT);RESULT=lt; :} 
	|	GT
		{: RelExpr gt = new RelExpr(BinOpType.GT);RESULT=gt; :}
	|	LTEQ
		{: RelExpr lteq = new RelExpr(BinOpType.LTEQ);RESULT=lteq; :}
	|	GTEQ
		{: RelExpr gteq = new RelExpr(BinOpType.GTEQ);RESULT=gteq; :}
	;

eq_op ::=
		EQEQ
		{: EqExpr eqeq = new EqExpr(BinOpType.EQEQ);RESULT=eqeq; :} 
	|	NOTEQ
		{: EqExpr noteq = new EqExpr(BinOpType.NOTEQ);RESULT=noteq; :} 
	;

cond_op ::=
		ANDAND 
		{: CondExpr andand = new CondExpr(BinOpType.ANDAND);RESULT=andand; :} 
	|	OROR
		{: CondExpr oror = new CondExpr(BinOpType.OROR);RESULT=oror; :} 
	;
	
literal ::=
		INT_LITERAL:l
		{:	RESULT = new IntLiteral(l);	:}
	|	FLOAT_LITERAL:l
		{:	RESULT = new FloatLiteral(l); :}
	|	BOOL_LITERAL:l
		{:	RESULT = new BoolLiteral(l); :}
	;

